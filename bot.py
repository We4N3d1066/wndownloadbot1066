import telebot
import requests
from colorama import init, Fore, Style
import io
from datetime import datetime
from telebot import types
from yt_dlp import YoutubeDL
import tempfile
import os
import shutil
import subprocess

init(autoreset=True)
bot = telebot.TeleBot("7303743486:AAGJBwniF5dLEwF027NuoN8Vk-IPEAFDUAs")  

user_mode = {}

def download_tiktok_video(url):
    try:
        requests.head(url, allow_redirects=True)
        api = "https://tikwm.com/api/"
        data = requests.get(api, params={"url": url}).json()
        if "data" in data and "play" in data["data"]:
            return data["data"]["play"]
    except Exception as e:
        print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
    return None

def download_youtube_video(url, format_id, bot=None, user_id=None, progress_message_id=None):
    try:
        temp_dir = tempfile.mkdtemp()
        outtmpl = os.path.join(temp_dir, '%(title)s.%(ext)s')
        progress = {'last_percent': -1}
        def progress_hook(d):
            if bot and user_id and progress_message_id and d['status'] == 'downloading':
                total_bytes = d.get('total_bytes') or d.get('total_bytes_estimate')
                downloaded_bytes = d.get('downloaded_bytes', 0)
                speed = d.get('speed')
                eta = d.get('eta')
                if total_bytes:
                    percent = int(downloaded_bytes / total_bytes * 100)
                    if percent != progress['last_percent']:
                        bar = '‚ñà' * (percent // 10) + '‚ñë' * (10 - percent // 10)
                        text = f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: |{bar}| {percent}%"
                        try:
                            bot.edit_message_text(text, user_id, progress_message_id)
                        except Exception:
                            pass
                        progress['last_percent'] = percent
                    
                    speed_mb = speed / 1024 / 1024 if speed else 0
                    left_bytes = total_bytes - downloaded_bytes if total_bytes and downloaded_bytes else 0
                    left_mb = left_bytes / 1024 / 1024
                    print(f"[YT] {percent}% | {downloaded_bytes // (1024*1024)}MB/{total_bytes // (1024*1024)}MB | "
                          f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed_mb:.2f} MB/s | –û—Å—Ç–∞–ª–æ—Å—å: {left_mb:.2f} MB | ETA: {eta if eta else '?'} —Å–µ–∫.", end='\r')
            if bot and user_id and progress_message_id and d['status'] == 'finished':
                try:
                    bot.edit_message_text('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100%\n–ì–æ—Ç–æ–≤–æ!', user_id, progress_message_id)
                except Exception:
                    pass
                print()  
        ydl_format = f"{format_id}+bestaudio/best"
        ydl_opts = {
            'format': ydl_format,
            'outtmpl': outtmpl,
            'quiet': True,
            'noplaylist': True,
            'merge_output_format': 'mp4',
            'progress_hooks': [progress_hook],
            'retries': 5,
            'fragment_retries': 10,
            'continuedl': True,
            'prefer_ffmpeg': True,
            'concurrent_fragment_downloads': 10,
            'http_chunk_size': 10485760,
            'noprogress': True,
            'no_warnings': True,
            'nocheckcertificate': True
        }
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        for filename in os.listdir(temp_dir):
            if filename.endswith('.mp4'):
                return os.path.join(temp_dir, filename)
        print(Fore.RED + "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ.")
    except Exception as e:
        print(Fore.RED + f"‚ùå  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ YouTube-–≤–∏–¥–µ–æ: {e}")
    return None

def get_youtube_info_ydl(url):
    ydl_opts = {
        'quiet': True,
        'skip_download': True,
        'noprogress': True,
        'no_warnings': True,
        'nocheckcertificate': True,
        'retries': 2
    }
    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
    video_info = {
        "title": info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
        "views": info.get("view_count", 0),
        "likes": info.get("like_count", 0),
        "publish_date": info.get("upload_date", "0000.00.00"),
        "channel": info.get("channel", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "duration": info.get("duration", 0),
        "thumbnail_url": info.get("thumbnail"),
        "formats": []
    }
    for fmt in info.get("formats", []):
        height = fmt.get("height")
        filesize = fmt.get("filesize") or fmt.get("filesize_approx")
        format_id = fmt.get("format_id")
        vcodec = fmt.get("vcodec")
        acodec = fmt.get("acodec")
        if height and filesize and format_id:
            size_mb = round(filesize / (1024 * 1024), 1)
            video_info["formats"].append({
                "format_id": format_id,
                "resolution": f"{height}p",
                "filesize_mb": size_mb
            })
        elif (vcodec == "none" and acodec != "none" and filesize and format_id):
            size_mb = round(filesize / (1024 * 1024), 1)
            video_info["formats"].append({
                "format_id": format_id,
                "resolution": "audio",
                "filesize_mb": size_mb
            })
    return video_info

def generate_video_card(info, user_id):
    TELEGRAM_FILE_LIMIT_MB = 49
    TELEGRAM_FILE_LIMIT = TELEGRAM_FILE_LIMIT_MB * 1024 * 1024
    title = info.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    views = info.get("views") or 0
    likes = info.get("likes") or 0
    publish_date = info.get("publish_date") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if publish_date and publish_date.isdigit() and len(publish_date) == 8:
        publish_date = f"{publish_date[:4]}.{publish_date[4:6]}.{publish_date[6:]}"
    channel = info.get("channel") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    duration = info.get("duration") or 0
    thumbnail_url = info.get("thumbnail_url")
    formats = info["formats"]
    try:
        minutes, seconds = divmod(int(duration), 60)
    except:
        minutes, seconds = 0, 0
    caption = (
        f"<b>{title}</b>\n"
        f"üëÅ {views:,}  ‚ù§Ô∏è {likes:,} –ª–∞–π–∫–æ–≤\n"
        f"üìÖ {publish_date}\n"
        f"üë§ {channel}\n"
        f"üïí {minutes:02}:{seconds:02}\n\n"
        f"üì• –í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ {TELEGRAM_FILE_LIMIT_MB} –ú–ë):"
    )
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    min_size_by_res = {}
    for fmt in formats:
        res = fmt.get("resolution") or "?"

        size = fmt.get("filesize_mb")
        format_id = fmt.get("format_id")
        size_bytes = size * 1024 * 1024 if size else None
        if not format_id or not size or size_bytes > TELEGRAM_FILE_LIMIT:
            continue
        if res == "?" and (not fmt.get("height")):
            res = "audio" if "audio" in (fmt.get("format_note") or "").lower() else "?"

        if res not in min_size_by_res or size < min_size_by_res[res]["filesize_mb"]:
            min_size_by_res[res] = fmt
    has_video = False
    for res, fmt in min_size_by_res.items():
        if res == "audio":
            continue
        size = fmt["filesize_mb"]
        format_id = fmt["format_id"]
        size_str = f"{size}mb"
        text = f"üìπ üî∏{res} - {size_str}"
        callback_data = f"yt_{format_id}"
        button = types.InlineKeyboardButton(text=text, callback_data=callback_data)
        keyboard.add(button)
        has_video = True
    best_audio = None
    for fmt in formats:
        is_audio = (
            (fmt.get("resolution") is None or fmt.get("resolution") == "audio") or
            ("audio" in (fmt.get("format_note") or "").lower())
        )
        if is_audio and fmt.get("filesize_mb"):
            size_bytes = fmt["filesize_mb"] * 1024 * 1024
            if size_bytes <= TELEGRAM_FILE_LIMIT:
                if not best_audio or fmt["filesize_mb"] < best_audio["filesize_mb"]:
                    best_audio = fmt
    if best_audio:
        audio_size = best_audio["filesize_mb"]
        audio_id = best_audio["format_id"]
        text = f"üéµüî∏MP3 - {audio_size}mb"
        callback_data = f"ytmp3_{audio_id}"
        button = types.InlineKeyboardButton(text=text, callback_data=callback_data)
        keyboard.add(button)
    if not has_video and not best_audio:
        keyboard.add(types.InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (–¥–æ 49 –ú–ë)", callback_data="yt_none"))

    if thumbnail_url and thumbnail_url.startswith("http"):
        if thumbnail_url.endswith('.webp'):
            thumbnail_url_jpg = thumbnail_url[:-5] + '.jpg'
        else:
            thumbnail_url_jpg = thumbnail_url
        try:
            bot.send_photo(user_id, photo=thumbnail_url_jpg, caption=caption, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–≤—å—é: {e}\nURL: {thumbnail_url_jpg}")
            bot.send_message(user_id, caption, reply_markup=keyboard, parse_mode="HTML")
    else:
        bot.send_message(user_id, caption, reply_markup=keyboard, parse_mode="HTML")

def download_instagram_video_ydl(url):
    try:
        temp_dir = tempfile.mkdtemp()
        outtmpl = os.path.join(temp_dir, '%(title)s.%(ext)s')
        ydl_opts = {
            'format': 'mp4',
            'outtmpl': outtmpl,
            'quiet': True,
            'noplaylist': True,
        }
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        for filename in os.listdir(temp_dir):
            if filename.endswith('.mp4'):
                return os.path.join(temp_dir, filename)
        print(Fore.RED + "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ.")
    except Exception as e:
        print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Instagram —á–µ—Ä–µ–∑ yt_dlp: {e}")
    return None

def log_download(log_path, user, username, user_id, url):
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_entry = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}\n"
        f"üîπ –Æ–∑: @{username}\n"
        f"üÜî ID: {user_id}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {url}\n"
        f"üìÖ –î–∞—Ç–∞: {now}\n"
        f"----------------------------------------\n"
    )
    os.makedirs(os.path.dirname(log_path), exist_ok=True)
    with open(log_path, 'a', encoding='utf-8') as f:
        f.write(log_entry)

@bot.message_handler(commands=['start'])
def start_message(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("üì± TikTok"),
        types.KeyboardButton("üì∫ YouTube"),
        types.KeyboardButton("üì∏ Instagram")
    )
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n‚ÑπÔ∏è–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –±–æ—Ç–∞",
        reply_markup=keyboard
    )

@bot.message_handler(func=lambda message: message.text in ["üì± TikTok", "üì∫ YouTube", "üì∏ Instagram"])
def select_platform(message):
    user_id = message.chat.id
    if message.text == "üì± TikTok":
        user_mode[user_id] = "tiktok"
        bot.send_message(user_id, "‚úÖ –†–µ–∂–∏–º TikTok –≤—ã–±—Ä–∞–Ω. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ üéµ")
    elif message.text == "üì∫ YouTube":
        user_mode[user_id] = {"mode": "youtube"}
        bot.send_message(user_id, "‚úÖ –†–µ–∂–∏–º YouTube –≤—ã–±—Ä–∞–Ω. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ üé¨.\n‚ö†Ô∏è–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –≤ —Å–∏–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram'a –∏ –Ω—É–ª–µ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞, –ø–æ—Ç–æ–º—É –æ–Ω –±—É–¥–µ—Ç –±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–º –¥–ª—è —Å–∫–∞—á–∫–∏ –º—É–∑—ã–∫–∏ –∏–ª–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ –¥–æ 49MB.")
    elif message.text == "üì∏ Instagram":
        user_mode[user_id] = "instagram"
        bot.send_message(user_id, "‚úÖ –†–µ–∂–∏–º Instagram –≤—ã–±—Ä–∞–Ω. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é üì∏")

@bot.message_handler(commands=['help'])
def help_command(message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="üìÑ –û –±–æ—Ç–µ", callback_data="help_about"),
        types.InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="help_help"),
        types.InlineKeyboardButton(text="üí∞ –î–æ–Ω–∞—Ç", callback_data="help_donate"),
        types.InlineKeyboardButton(text="üîó –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="help_feedback")
    )
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == "help_about")
def help_about_callback(call):
    about_text = (
        "<b>üìÑ–û –±–æ—Ç–µ</b>\n\n"
        "‚ö†Ô∏è–ë–æ—Ç ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–µ–±–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ –æ—Å–≤–æ–µ–Ω–∏—é Telegram API –∏ Python.\n"
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –ø–æ–ª–Ω—ã–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏ –±—é–¥–∂–µ—Ç–∞, –Ω–∏ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ BotAPI –ø–æ–∫–∞ –Ω–µ—Ç. "
        "–ù–µ –ø–æ–ª–Ω—ã–π —Ñ–∞—Ä—à, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ.\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–µ—Ç—Å—è –∏–ª–∏ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî –Ω–∞–ø–∏—à–∏, –∏—Å–ø—Ä–∞–≤–∏–º\n\n\n"
        "<b>‚ÑπÔ∏è–û —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ:</b>\n\n" 
        "üì± TikTok: –°–∫–∞—á–∫–∞ –≤–∏–¥–µ–æ (MP4) + —Å–∫–∞—á–∫–∞ –∞—É–¥–∏–æ (MP3);\n"
        "üì∫ YouTube: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –ø—Ä—è–º–æ –≤ Telegram'e, —Å–∫–∞—á–∫–∞ –≤–∏–¥–µ–æ (MP4), —Å–∫–∞—á–∫–∞ –∞—É–¥–∏–æ (MP3);\n"
        "üì∏ Instagram: –°–∫–∞—á–∫–∞ –≤–∏–¥–µ–æ (MP4) + —Å–∫–∞—á–∫–∞ –∞—É–¥–∏–æ (MP3)."
    )
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help_back"))
    try:
        bot.edit_message_text(
            about_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception:
        bot.send_message(
            call.message.chat.id,
            about_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

@bot.callback_query_handler(func=lambda call: call.data == "help_help")
def help_help_callback(call):
    help_text = (
        "<b>üÜò –ü–æ–º–æ—â—å</b>\n\n"
        "üì± TikTok: –í–∏–¥–µ–æ —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤. –ê —Ç–∞–∫–∂–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –∑–∞–∫—Ä—ã—Ç—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–∫–∞—á–∞–Ω—ã –≤ —Å–≤—è–∑–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ TikTok;\n\n"
        "üì∫ YouTube: –° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '@vid ...' –º–æ–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –º—É–∑—ã–∫—É –ø—Ä—è–º–æ –≤ Telegram'e;\n\n"
        "üì∏ Instagram: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –∑–∞–∫—Ä—ã—Ç—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–∫–∞—á–∞–Ω—ã –≤ —Å–≤—è–∑–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ Instagram."
    )
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help_back"))
    try:
        bot.edit_message_text(
            help_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception:
        bot.send_message(
            call.message.chat.id,
            help_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

@bot.callback_query_handler(func=lambda call: call.data == "help_back")
def help_back_callback(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="üìÑ –û –±–æ—Ç–µ", callback_data="help_about"),
        types.InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="help_help"),
        types.InlineKeyboardButton(text="üí∞ –î–æ–Ω–∞—Ç", callback_data="help_donate"),
        types.InlineKeyboardButton(text="üîó –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="help_feedback")
    )
    try:
        bot.edit_message_text(
            "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )
    except Exception:
        bot.send_message(
            call.message.chat.id,
            "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )

@bot.message_handler(func=lambda m: m.chat.type in ["group", "supergroup"] and m.text)
def group_tiktok_instagram_handler(message):
    text = message.text or ""
    user_id = message.chat.id
    if "tiktok.com" in text:
        url = text.strip().split()[0]
        process_tiktok_instagram(bot, user_id, url, reply_to_message_id=message.message_id, is_tiktok=True, user_info=message)
        return
    if "instagram.com" in text:
        url = text.strip().split()[0]
        process_tiktok_instagram(bot, user_id, url, reply_to_message_id=message.message_id, is_tiktok=False, user_info=message)
        return

@bot.message_handler(func=lambda m: m.chat.type == "private")
def handle_message(message):
    user_id = message.chat.id
    if message.text and message.text.startswith("/"):
        return  # –ù–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —è–≤–Ω–æ
    if user_id not in user_mode:
        bot.send_message(user_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é –Ω–∏–∂–µ.")
        return
    mode_data = user_mode[user_id]
    mode = mode_data["mode"] if isinstance(mode_data, dict) else mode_data
    url = message.text.strip()
    if mode == "tiktok":
        if "tiktok.com" not in url:
            bot.send_message(user_id, "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok üéµ")
            return
        process_tiktok_instagram(bot, user_id, url, is_tiktok=True, log_func=log_download, user_info=message)
        return
    elif mode == "instagram":
        if "instagram.com" not in url:
            bot.send_message(user_id, "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏–∑ Instagram üì∏")
            return
        process_tiktok_instagram(bot, user_id, url, is_tiktok=False, log_func=log_download, user_info=message)
        return
    elif mode == "youtube":
        if "youtube.com" not in url and "youtu.be" not in url:
            bot.send_message(user_id, "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube üì∫")
            return
        status_msg = bot.send_message(user_id, "üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
        try:
            info = get_youtube_info_ydl(url)
            user_mode[user_id] = {"mode": "youtube", "url": url, "info": info}
            generate_video_card(info, user_id)
        except Exception as e:
            bot.send_message(user_id,  "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
            print(Fore.RED + f"–û—à–∏–±–∫–∞ YouTube: {e}")
        finally:
            try:
                bot.delete_message(user_id, status_msg.message_id)
            except Exception:
                pass

@bot.callback_query_handler(func=lambda call: call.data.startswith("yt_"))
def handle_youtube_button(call):
    user_id = call.message.chat.id
    format_id = call.data.split("_", 1)[1]
    user_data = user_mode.get(user_id)
    if not user_data or not isinstance(user_data, dict) or "url" not in user_data:
        bot.send_message(user_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube.")
        return
    url = user_data["url"]
    try:
        bot.delete_message(user_id, call.message.message_id)
    except Exception:
        pass
    user_msg = bot.send_message(user_id, "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: |‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë| 0%")
    video_path = download_youtube_video(url, format_id, bot=bot, user_id=user_id, progress_message_id=user_msg.message_id)
    if not video_path:
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ.")
        return
    try:
        filesize_mb = round(os.path.getsize(video_path) / (1024 * 1024), 1)
        info = user_data.get("info", {})
        chosen_format = None
        for fmt in info.get("formats", []):
            if fmt.get("format_id") == format_id:
                chosen_format = fmt
                break
        res = chosen_format.get("resolution") if chosen_format else "?"

        size = f"{filesize_mb} MB"
        caption = f"üìπ –ö–∞—á–µ—Å—Ç–≤–æ: <b>{res}</b>\nüíæ –†–∞–∑–º–µ—Ä: <b>{size}</b>\nü§ñ –ë–æ—Ç: @wndownloadbot"
        with open(video_path, "rb") as video:
            bot.send_video(user_id, video, timeout=120, caption=caption, parse_mode="HTML")
        print(Fore.GREEN + f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {video_path}")
        bot.delete_message(user_id, user_msg.message_id)
        log_download(
            os.path.join("logs", "download_youtube_log.txt"),
            call.from_user.first_name or "-",
            call.from_user.username or "-",
            user_id,
            url
        )
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.")
        print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    finally:
        if video_path and os.path.exists(video_path):
            os.remove(video_path)
            print(Fore.YELLOW + f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {video_path}")
            shutil.rmtree(os.path.dirname(video_path), ignore_errors=True)
            print(Fore.YELLOW + f"üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {os.path.dirname(video_path)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("ytmp3_"))
def handle_youtube_mp3_button(call):
    user_id = call.message.chat.id
    format_id = call.data.split("_", 1)[1]
    user_data = user_mode.get(user_id)
    if not user_data or not isinstance(user_data, dict) or "url" not in user_data:
        bot.send_message(user_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube.")
        return
    url = user_data["url"]
    try:
        bot.delete_message(user_id, call.message.message_id)
    except Exception:
        pass
    user_msg = bot.send_message(user_id, "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ: |‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë| 0%")
    audio_path = None
    try:
        temp_dir = tempfile.mkdtemp()
        outtmpl = os.path.join(temp_dir, '%(title)s.%(ext)s')
        def progress_hook(d):
            if bot and user_id and user_msg.message_id and d['status'] == 'downloading':
                total_bytes = d.get('total_bytes') or d.get('total_bytes_estimate')
                downloaded_bytes = d.get('downloaded_bytes', 0)
                percent = int(downloaded_bytes / total_bytes * 100) if total_bytes else 0
                bar = '‚ñà' * (percent // 10) + '‚ñë' * (10 - percent // 10)
                text = f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ: |{bar}| {percent}%"
                try:
                    bot.edit_message_text(text, user_id, user_msg.message_id)
                except Exception:
                    pass
            if bot and user_id and user_msg.message_id and d['status'] == 'finished':
                try:
                    bot.edit_message_text('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ: |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100%\n–ì–æ—Ç–æ–≤–æ!', user_id, user_msg.message_id)
                except Exception:
                    pass
        ydl_opts = {
            'format': format_id,
            'outtmpl': outtmpl,
            'quiet': True,
            'noplaylist': True,
            'progress_hooks': [progress_hook],
            'retries': 5,
            'fragment_retries': 10,
            'continuedl': True,
            'prefer_ffmpeg': True,
            'concurrent_fragment_downloads': 5,
            'http_chunk_size': 10485760,
            'noprogress': True,
            'no_warnings': True,
            'nocheckcertificate': True,
            'merge_output_format': 'mp3',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }]
        }
        from yt_dlp import YoutubeDL
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        for filename in os.listdir(temp_dir):
            if filename.endswith('.mp3'):
                audio_path = os.path.join(temp_dir, filename)
                break
        if not audio_path:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –≤ mp3-—Ñ–æ—Ä–º–∞—Ç–µ.")
            return
        filesize_mb = round(os.path.getsize(audio_path) / (1024 * 1024), 1)
        caption = f"üéµ MP3\nüíæ –†–∞–∑–º–µ—Ä: <b>{filesize_mb} MB</b>\nü§ñ –ë–æ—Ç: @wndownloadbot"
        with open(audio_path, "rb") as audio:
            bot.send_audio(user_id, audio, timeout=120, caption=caption, parse_mode="HTML")
        print(Fore.GREEN + f"‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {audio_path}")
        bot.delete_message(user_id, user_msg.message_id)
        log_download(
            os.path.join("logs", "download_youtube_log.txt"),
            call.from_user.first_name or "-",
            call.from_user.username or "-",
            user_id,
            url
        )
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.")
        print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
    finally:
        if audio_path and os.path.exists(audio_path):
            os.remove(audio_path)
            print(Fore.YELLOW + f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {audio_path}")
            shutil.rmtree(os.path.dirname(audio_path), ignore_errors=True)
            print(Fore.YELLOW + f"üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {os.path.dirname(audio_path)}")

def extract_mp3_from_video(video_path, mp3_path):
    ffmpeg_path = os.path.abspath(os.path.join("lib", "ffmpeg-2025-06-16-git-e6fb8f373e-essentials_build", "bin", "ffmpeg.exe"))
    ffmpeg_args = [
        ffmpeg_path, '-y', '-i', video_path, '-vn', '-acodec', 'libmp3lame',
        '-ar', '44100', '-ac', '2', '-ab', '192k', '-f', 'mp3', mp3_path
    ]
    subprocess.run(ffmpeg_args, capture_output=True)
    return os.path.exists(mp3_path)

def cleanup_temp_files(video_path, mp3_path=None):
    if video_path and os.path.exists(video_path):
        os.remove(video_path)
    if mp3_path and os.path.exists(mp3_path):
        os.remove(mp3_path)
    temp_dir = os.path.dirname(video_path)
    shutil.rmtree(temp_dir, ignore_errors=True)

def process_tiktok_instagram(bot, user_id, url, reply_to_message_id=None, is_tiktok=True, log_func=None, user_info=None):
    import time
    status_msg = None
    temp_dir = tempfile.mkdtemp()
    video_path = os.path.join(temp_dir, "video.mp4")
    mp3_path = os.path.join(temp_dir, "audio.mp3")
    try:
        if is_tiktok:
            if bot:
                status_msg = bot.send_message(user_id, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ TikTok...") if not reply_to_message_id else (bot.reply_to(user_info, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ TikTok...") if user_info else bot.send_message(user_id, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ TikTok..."))
            video_url = download_tiktok_video(url)
        else:
            if bot:
                status_msg = bot.send_message(user_id, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ Instagram...") if not reply_to_message_id else (bot.reply_to(user_info, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ Instagram...") if user_info else bot.send_message(user_id, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ Instagram..."))
            video_url = url
        if not video_url:
            if bot:
                msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ." if is_tiktok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
                if not reply_to_message_id:
                    bot.send_message(user_id, msg)
                else:
                    if user_info:
                        bot.reply_to(user_info, msg)
                    else:
                        bot.send_message(user_id, msg)
            return
        if is_tiktok:
            response = requests.get(video_url, stream=True, timeout=15)
            with open(video_path, "wb") as f:
                for chunk in response.iter_content(chunk_size=10 * 1024 * 1024):
                    f.write(chunk)
        else:
            video_path = download_instagram_video_ydl(url)
            if not video_path:
                if bot:
                    msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
                    if not reply_to_message_id:
                        bot.send_message(user_id, msg)
                    else:
                        if user_info:
                            bot.reply_to(user_info, msg)
                        else:
                            bot.send_message(user_id, msg)
                return
        with open(video_path, "rb") as video_bytes:
            if not reply_to_message_id:
                bot.send_video(user_id, video_bytes, timeout=60, caption="ü§ñ –ë–æ—Ç: @wndownloadbot")
            else:
                bot.send_video(user_id, video_bytes, timeout=60, caption="ü§ñ –ë–æ—Ç: @wndownloadbot", reply_to_message_id=reply_to_message_id)
        if log_func and user_info:
            log_func(
                os.path.join("logs", "download_tiktok_log.txt") if is_tiktok else os.path.join("logs", "download_insta_log.txt"),
                user_info.from_user.first_name or "-",
                user_info.from_user.username or "-",
                user_id,
                url
            )
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ mp3
        if extract_mp3_from_video(video_path, mp3_path):
            with open(mp3_path, "rb") as audio_bytes:
                if not reply_to_message_id:
                    bot.send_audio(user_id, audio_bytes, timeout=60, caption="üéµ MP3 –∏–∑ TikTok-–≤–∏–¥–µ–æ" if is_tiktok else "üéµ MP3 –∏–∑ Instagram-–≤–∏–¥–µ–æ")
                else:
                    bot.send_audio(user_id, audio_bytes, timeout=60, caption="üéµ MP3 –∏–∑ TikTok-–≤–∏–¥–µ–æ" if is_tiktok else "üéµ MP3 –∏–∑ Instagram-–≤–∏–¥–µ–æ", reply_to_message_id=reply_to_message_id)
            if log_func and user_info and is_tiktok:
                log_func(
                    os.path.join("logs", "download_tiktok_log.txt"),
                    user_info.from_user.first_name or "-",
                    user_info.from_user.username or "-",
                    user_id,
                    url
                )
        else:
            if bot:
                msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ (TikTok). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ffmpeg." if is_tiktok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ (Instagram). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ffmpeg."
                if not reply_to_message_id:
                    bot.send_message(user_id, msg)
                else:
                    if user_info:
                        bot.reply_to(user_info, msg)
                    else:
                        bot.send_message(user_id, msg)
        if status_msg:
            try:
                if not reply_to_message_id:
                    bot.delete_message(user_id, status_msg.message_id)
                else:
                    bot.delete_message(user_id, status_msg.message_id)
            except Exception:
                pass
    except Exception as e:
        if bot:
            msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ." if is_tiktok else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ."
            if not reply_to_message_id:
                bot.send_message(user_id, msg)
            else:
                if user_info:
                    bot.reply_to(user_info, msg)
                else:
                    bot.send_message(user_id, msg)
    finally:
        cleanup_temp_files(video_path, mp3_path)

@bot.callback_query_handler(func=lambda call: call.data == "help_donate")
def help_donate_callback(call):
    donate_caption = "üíµ–•–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ? –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø–æ QR-–∫–æ–¥—É!"
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help_back"))

    import os
    img_path = os.path.join(os.path.dirname(__file__), "visual", "binance_donate.png")
    if os.path.exists(img_path):
        with open(img_path, "rb") as photo:
            try:
                bot.edit_message_media(
                    media=types.InputMediaPhoto(photo, caption=donate_caption, parse_mode="HTML"),
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=keyboard
                )
            except Exception:
                bot.send_photo(
                    call.message.chat.id,
                    photo,
                    caption=donate_caption,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
    else:
        bot.edit_message_text(
            "‚ùå –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )

@bot.callback_query_handler(func=lambda call: call.data == "help_feedback")
def help_feedback_callback(call):
    feedback_text = (
        "<b>üîó –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n"
        "‚úàÔ∏è Telegram ‚Äî <a href=\"https://t.me/zxcd17b1073\">@zxcd17b1073</a>\n"
        "üõ© Spare telegram ‚Äî <a href=\"https://t.me/stuppidnigger\">@stuppidnigger</a>\n"
        "üì∑ Instagram ‚Äî <a href=\"https://www.instagram.com/we4n3d1066?igsh=aWxhaXhteHRjNXNo\">we4n3d1066</a>\n"
        "üëæ Discord ‚Äî <a href=\"https://discord.com/users/916274823477485619\">we4n3d1066</a>"
    )
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help_back"))
    try:
        bot.edit_message_text(
            feedback_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception:
        bot.send_message(
            call.message.chat.id,
            feedback_text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

@bot.message_handler(content_types=['text'])
def group_tiktok_instagram_handler(message):
    # –¢–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
    if message.chat.type not in ["group", "supergroup"]:
        return
    text = message.text or ""
    user_id = message.chat.id
    # TikTok
    if "tiktok.com" in text:
        url = text.strip().split()[0]
        status_msg = bot.reply_to(message, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ TikTok...")
        video_url = download_tiktok_video(url)
        if not video_url:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ.")
            return
        temp_dir = tempfile.mkdtemp()
        video_path = os.path.join(temp_dir, "video.mp4")
        mp3_path = os.path.join(temp_dir, "audio.mp3")
        try:
            response = requests.get(video_url, stream=True, timeout=15)
            with open(video_path, "wb") as f:
                for chunk in response.iter_content(chunk_size=10 * 1024 * 1024):
                    f.write(chunk)
            with open(video_path, "rb") as video_bytes:
                bot.send_video(user_id, video_bytes, timeout=60, caption="ü§ñ –ë–æ—Ç: @wndownloadbot", reply_to_message_id=message.message_id)
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ mp3 —á–µ—Ä–µ–∑ ffmpeg
            ffmpeg_path = os.path.abspath(os.path.join("lib", "ffmpeg-2025-06-16-git-e6fb8f373e-essentials_build", "bin", "ffmpeg.exe"))
            ffmpeg_args = [
                ffmpeg_path, '-y', '-i', video_path, '-vn', '-acodec', 'libmp3lame',
                '-ar', '44100', '-ac', '2', '-ab', '192k', '-f', 'mp3', mp3_path
            ]
            subprocess.run(ffmpeg_args, capture_output=True)
            if os.path.exists(mp3_path):
                with open(mp3_path, "rb") as audio_bytes:
                    bot.send_audio(user_id, audio_bytes, timeout=60, caption="üéµ MP3 –∏–∑ TikTok-–≤–∏–¥–µ–æ", reply_to_message_id=message.message_id)
            try:
                bot.delete_message(user_id, status_msg.message_id)
            except Exception:
                pass
        except Exception as e:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ.")
        finally:
            if os.path.exists(video_path):
                os.remove(video_path)
            if os.path.exists(mp3_path):
                os.remove(mp3_path)
            shutil.rmtree(temp_dir, ignore_errors=True)
        return
    # Instagram
    if "instagram.com" in text:
        url = text.strip().split()[0]
        status_msg = bot.reply_to(message, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ Instagram...")
        video_path = download_instagram_video_ydl(url)
        if not video_path:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        try:
            with open(video_path, "rb") as video:
                bot.send_video(user_id, video, timeout=60, caption="ü§ñ –ë–æ—Ç: @wndownloadbot", reply_to_message_id=message.message_id)
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ mp3 —á–µ—Ä–µ–∑ ffmpeg
            ffmpeg_path = os.path.abspath(os.path.join("lib", "ffmpeg-2025-06-16-git-e6fb8f373e-essentials_build", "bin", "ffmpeg.exe"))
            mp3_path = video_path + ".mp3"
            ffmpeg_args = [
                ffmpeg_path, '-y', '-i', video_path, '-vn', '-acodec', 'libmp3lame',
                '-ar', '44100', '-ac', '2', '-ab', '192k', '-f', 'mp3', mp3_path
            ]
            subprocess.run(ffmpeg_args, capture_output=True)
            if os.path.exists(mp3_path):
                with open(mp3_path, "rb") as audio_bytes:
                    bot.send_audio(user_id, audio_bytes, timeout=60, caption="üéµ MP3 –∏–∑ Instagram-–≤–∏–¥–µ–æ", reply_to_message_id=message.message_id)
                os.remove(mp3_path)
            try:
                bot.delete_message(user_id, status_msg.message_id)
            except Exception:
                pass
        except Exception as e:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.")
        finally:
            if video_path and os.path.exists(video_path):
                os.remove(video_path)
                shutil.rmtree(os.path.dirname(video_path), ignore_errors=True)
        return

if __name__ == "__main__":
    try:
        print(Fore.GREEN + "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π... üßê")
        bot.polling(none_stop=True, timeout=90, long_polling_timeout=60)
    except KeyboardInterrupt:
        print(Fore.RED + "\n‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (Ctrl + C)")
    finally:
        print(Fore.YELLOW + "üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –î–æ –≤—Å—Ç—Ä–µ—á–∏!" + Style.RESET_ALL)
        import time
        time.sleep(0.2)
        import logging
        logging.getLogger('telebot').setLevel(logging.CRITICAL)